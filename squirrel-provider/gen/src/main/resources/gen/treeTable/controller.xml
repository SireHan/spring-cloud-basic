<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/controller/${subModuleName}</filePath>
	<fileName>${table.className}Controller.java</fileName>
	<content><![CDATA[
/**
 *  该类有generator 自动生成
 * Copyright &copy; 2017-2018 All rights reserved.
 */
package ${packageName}.${moduleName}.controller<#if subModuleName != "">.${subModuleName}</#if>;


import com.robust.basic.common.base.BaseController;
import com.robust.basic.common.base.BaseFile;
import com.robust.basic.common.base.BaseOpMsg;
import com.robust.basic.common.status.StatusCode;
import com.robust.basic.common.base.BaseTableData;
import com.robust.basic.common.util.excel.ExcelUtil;
import com.robust.basic.common.util.ParseUtil;
import com.robust.basic.common.config.sysUtil.UserUtil;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${table.className}Service;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${table.className};
import com.robust.basic.modules.sys.entity.SysUser;
<#list table.tableColumns as c>
	<#if c.showType?? && c.showType == "select" && c.dictType?? >
import com.robust.basic.modules.sys.entity.SysDict;
import com.robust.basic.modules.sys.service.SysDictService;
	<#break>
	</#if>
</#list>

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

<#list table.allTableColumns as c>
	 <#assign  flag="false"/>
	 <#if c.isImport?? && c.isImport == "1" && c.validators?? && flag=="false">
			<#list c.validators as v>
                <#if  v=="alphabet" || v=="number">
import java.util.regex.Matcher;
import java.util.regex.Pattern;
				<#assign  flag="true"/>
				<#break>
				</#if>
            </#list>
	 </#if>
</#list>


/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${"$"}{app.adminPath}/${moduleName}/${table.className?uncap_first}")
public class ${table.className}Controller extends BaseController {

	@Autowired
	private ${table.className}Service ${table.className?uncap_first}Service;

	private int order = 0;//菜单排序变量
	<#list table.tableColumns as c>
		<#if c.showType?? && c.showType == "select" && c.dictType?? && table.className!="SysDict">
	@Autowired
	private SysDictService sysDictService;
		<#break>
		</#if>
	</#list>


	/**
	 * List页面
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = {"list", ""})
	public String list(HttpServletRequest request, HttpServletResponse response, Model model) {
		//下拉选查询 自定义内容需要手动添加
		<#list table.tableColumns as c>
		<#if c.showType?? && c.dictType??>
		</#if>
			<#if c.showType?? && c.showType == "select" && c.dictType?? && c.dictType!="">
		SysDict ${c.javaField}Dict = new SysDict();
		${c.javaField}Dict.setDescription("${c.dictType}");
		List<SysDict> ${c.javaField}List = sysDictService.findList(${c.javaField}Dict);
		model.addAttribute("${c.javaField}List",${c.javaField}List);
			</#if>
		</#list>
		return "modules/${moduleName}/${table.className?uncap_first}List";
	}

	/**
	 * 根据id 查询数据
	 * @param ${table.className?uncap_first}
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "select${table.className}")
	public BaseOpMsg<${table.className}> select${table.className}(${table.className} ${table.className?uncap_first}) {
		BaseOpMsg<${table.className}> result = new BaseOpMsg<${table.className}>();
		if(${table.className?uncap_first}.getId()!=null){
			List<${table.className}> ${table.className?uncap_first}List = ${table.className?uncap_first}Service.findList(${table.className?uncap_first});
			if(${table.className?uncap_first}List!=null&&${table.className?uncap_first}List.size()>0){
				result.setCode(StatusCode.CURD_SINGLE_SELECT_SUCCESS);
				result.setStatus("success");
				result.setMsg("查询数据成功！");
				result.setList(${table.className?uncap_first}List);//返回查询数据
			}else{
				result.setCode(StatusCode.CURD_SINGLE_SELECT_FAILURE);
				result.setStatus("error");
				result.setMsg("查询数据失败！");
				if(logger.isDebugEnabled()){
					result.setDescription(${table.className?uncap_first}Service.getErrorInfo());
				}
			}
		}else{
			result.setCode(StatusCode.CURD_SINGLE_SELECT_FAILURE);
			result.setStatus("error");
			result.setMsg("查询数据失败！");
			if(logger.isDebugEnabled()){
				result.setDescription("数据id为空");
			}
		}
	    return result;
	}

	/**
	 * 根据ids 删除数据
	 * @param ids
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "delete${table.className}")
	public BaseOpMsg delete${table.className}(String ids) {
		BaseOpMsg result = new BaseOpMsg();
		if(ids!=null&&!"".equals(ids)){
			String[] idsArray = ids.split(",");
			List<Long> idsLong = new ArrayList<>();
			for(String s:idsArray){
				idsLong.add(ParseUtil.getLong(s));
			}
			if(${table.className?uncap_first}Service.deleteObj(idsLong)){
				result.setCode(StatusCode.CURD_SINGLE_DELETE_SUCCESS);
				result.setStatus("success");
				result.setMsg("删除数据成功！");
			}else{
				result.setCode(StatusCode.CURD_SINGLE_DELETE_FAILURE);
				result.setStatus("error");
				result.setMsg("删除数据失败！");
				if(logger.isDebugEnabled()){
					result.setDescription(${table.className?uncap_first}Service.getErrorInfo());
				}
			}
		}else{
			result.setCode(StatusCode.CURD_SINGLE_DELETE_FAILURE);
			result.setStatus("error");
			result.setMsg("删除数据失败！");
			if(logger.isDebugEnabled()){
				result.setDescription("数据ids为空");
			}
		}
	    return result;
	}

	/**
	 * 返回列表数据
		 {
		  "draw": 4,
		  "recordsTotal": 57,
		  "recordsFiltered": 57,
		  "data": [
		    [
		      "Charde",
		      "Marshall",
		      "Regional Director",
		      "San Francisco",
		      "16th Oct 08",
		      "$470,600"
		    ],[]...
		  }
	 *
	 *
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = {"dataList"})
	public BaseOpMsg dataList(HttpServletRequest request, HttpServletResponse response, Model model) {
		Map<String,Object> params = new HashMap<>();
		//取出request的参数信息放到params里 ${table.className} 里
		${table.className} ${table.className?uncap_first} = new ${table.className}();

		getInfoFromRequest(request,params,${table.className?uncap_first});
		//数据的draw自增
		List<${table.className}>  ${table.className?uncap_first}List = ${table.className?uncap_first}Service.findList(params,${table.className?uncap_first});
		BaseOpMsg result = new BaseOpMsg();
		result.setCode(StatusCode.CURD_MULTI_SELECT_SUCCESS);
		result.setStatus("success");
		result.setList(${table.className?uncap_first}List);
		result.setMsg("查询数据成功！");
		return result;
	}

	/**
	 * 保存or修改操作
	 * @param request
	 * @param ${table.className?uncap_first}
	 * @param model
	 * @param opType 操作类型
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = {"modify"})
	public BaseOpMsg modify(HttpServletRequest request, ${table.className} ${table.className?uncap_first}, Model model, String opType) {
		SysUser user = UserUtil.getInstance().getUser();
		BaseOpMsg result = new BaseOpMsg();
		if(opType!=null&&!"".equals(opType)){
			if("save".equals(opType)){//新增保存

				if(${table.className?uncap_first}Service.saveObj(${table.className?uncap_first},user)){
					result.setCode(StatusCode.CURD_SINGLE_ADD_SUCCESS);
					result.setStatus("success");
					result.setMsg("保存数据成功！");
				}else{
					result.setCode(StatusCode.CURD_SINGLE_ADD_FAILURE);
					result.setStatus("error");
					result.setMsg("保存数据失败！");
					if(logger.isDebugEnabled()){
						result.setDescription(${table.className?uncap_first}Service.getErrorInfo());
					}
				}
			}else if("update".equals(opType)){//修改保存
				if(${table.className?uncap_first}Service.updateObj(${table.className?uncap_first},user)){
					result.setCode(StatusCode.CURD_SINGLE_ADD_SUCCESS);
					result.setStatus("success");
					result.setMsg("修改数据成功！");
				}else{
					result.setCode(StatusCode.CURD_SINGLE_ADD_FAILURE);
					result.setStatus("error");
					result.setMsg("修改数据失败！");
					if(logger.isDebugEnabled()){
						result.setDescription(${table.className?uncap_first}Service.getErrorInfo());
					}
				}
			}else{
				result.setCode(StatusCode.CURD_SINGLE_ADD_FAILURE);
				result.setStatus("error");
				result.setMsg("操作违法！");
				if(logger.isDebugEnabled()){
					result.setDescription("opType 违法");
				}
			}
		}else{
			result.setCode(StatusCode.CURD_SINGLE_ADD_FAILURE);
			result.setStatus("error");
			result.setMsg("操作违法！");
			if(logger.isDebugEnabled()){
				result.setDescription("opType 违法 或 null");
			}
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "tree${table.className}")
	public BaseOpMsg tree${table.className}(HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Map<String,Object>> ${table.className?uncap_first}ListMap = new ArrayList<Map<String,Object>>();

		${table.className} ${table.className?uncap_first} = new ${table.className}();
		List<${table.className}> ${table.className?uncap_first}List = ${table.className?uncap_first}Service.findList(${table.className?uncap_first});

		StringBuffer ids = new StringBuffer(",");
		StringBuffer rootIds = new StringBuffer(",");
		for (int i=0; i<${table.className?uncap_first}List.size(); i++){
			ids.append(${table.className?uncap_first}List.get(i).getId()+",");
		}
		for (int i=0; i<${table.className?uncap_first}List.size(); i++){
			if (ids.indexOf(","+${table.className?uncap_first}List.get(i).getParentId()+",") == -1){
				if (rootIds.indexOf(","+${table.className?uncap_first}List.get(i).getParentId()+",") == -1){
					rootIds.append(${table.className?uncap_first}List.get(i).getParentId()+",");
				}
			}
		}
		List<Long> rootList = new ArrayList<>();
		String[] idStr = rootIds.toString().split(",");
		order=0;
		for (int j=1; j<idStr.length; j++){
			${table.className?uncap_first}ListMap.addAll(addTree(ParseUtil.getLong(idStr[j]),${table.className?uncap_first}List));
		}
		BaseOpMsg result = new BaseOpMsg();
		if(${table.className?uncap_first}ListMap!=null&&${table.className?uncap_first}ListMap.size()>0){
			result.setCode(StatusCode.TREE_MENU_SELECT_SUCCESS);
			result.setStatus("success");
			result.setList(${table.className?uncap_first}ListMap);
			result.setMsg("树查询数据成功！");
		}else{
			result.setCode(StatusCode.TREE_MENU_SELECT_FAILURE);
			result.setStatus("success");
			result.setMsg("树查询数据失败！");
			if(logger.isDebugEnabled()){
				result.setDescription("");
			}
		}
		return result;
	}

	private List<Map<String,Object>> addTree(Long id, List<${table.className}> ${table.className?uncap_first}List) {
		Map<String,Object> map = null;
		List<Map<String,Object>> mapList = null;
		for(int i=0;i<${table.className?uncap_first}List.size();i++){
			if(${table.className?uncap_first}List.get(i).getParentId().equals(id)){
				if(mapList==null){
					mapList = new ArrayList<>();
				}
				map = new HashMap<>();
				map.put("text", ${table.className?uncap_first}List.get(i).getName());
				map.put("value", ${table.className?uncap_first}List.get(i).getId());
				map.put("order", order);
				order++;
				List<Map<String,Object>> childMap = addTree(${table.className?uncap_first}List.get(i).getId(),${table.className?uncap_first}List);
				if(childMap!=null){
					map.put("nodes", childMap);
				}
				mapList.add(map);
			}
		}
		return mapList;
	}


	private void getInfoFromRequest(HttpServletRequest request, Map<String, Object> params, ${table.className} ${table.className?uncap_first}) {
		//分页信息
		Integer start = ParseUtil.getInteger(request.getParameter("start"));
		Integer pageSize = ParseUtil.getInteger(request.getParameter("length"));
		//0代表行号 表头第一行   表格的排序列 排序方式  列名称
		Integer orderNum = ParseUtil.getInteger(request.getParameter("order[0][column]"));
		String orderDir = request.getParameter("order[0][dir]");
		String orderName = request.getParameter("columns["+orderNum+"][name]");
		params.put("start", start);
		params.put("pageSize", pageSize);
		if(orderName!=null){
			params.put("orderDir", orderDir);
			params.put("orderName", orderName);
		}
		//查询条件
		<#list table.allTableColumns as c>
			<#if c.javaType == "String">
		String ${c.javaField} = request.getParameter("${c.javaField}");
		if(${c.javaField}!=null&&!"".equals(${c.javaField})){
			${table.className?uncap_first}.set${c.javaField?cap_first}(${c.javaField});
		}
			<#elseif c.javaType == "Integer">
		String ${c.javaField} = request.getParameter("${c.javaField}");
		if(${c.javaField}!=null){
			${table.className?uncap_first}.set${c.javaField?cap_first}(ParseUtil.getInteger(${c.javaField}));
		}
			<#elseif c.javaType == "Long">
		String ${c.javaField} = request.getParameter("${c.javaField}");
		if(${c.javaField}!=null){
			${table.className?uncap_first}.set${c.javaField?cap_first}(ParseUtil.getLong(${c.javaField}));
		}
			<#elseif c.javaType == "Double">
		String ${c.javaField} = request.getParameter("${c.javaField}");
		if(${c.javaField}!=null){
			${table.className?uncap_first}.set${c.javaField?cap_first}(ParseUtil.getDouble(${c.javaField}));
		}
			<#elseif c.javaType == "Date">
				<#if c.isQuery?? && c.isQuery == "1" && c.queryType == "between">
        String begin${c.javaField?cap_first} = request.getParameter("begin${c.javaField?cap_first}");
        if(begin${c.javaField?cap_first}!=null){
			${table.className?uncap_first}.setBegin${c.javaField?cap_first}(ParseUtil.getDate(begin${c.javaField?cap_first},"${c.format}"));
		}
		String end${c.javaField?cap_first} = request.getParameter("end${c.javaField?cap_first}");
		if(end${c.javaField?cap_first}!=null){
			${table.className?uncap_first}.setEnd${c.javaField?cap_first}(ParseUtil.getDate(end${c.javaField?cap_first},"${c.format}"));
		}
				<#else>
		String ${c.javaField} = request.getParameter("${c.javaField}");
		if(${c.javaField}!=null){
			${table.className?uncap_first}.set${c.javaField?cap_first}(ParseUtil.getDate(${c.javaField},"${c.format}"));
		}
				</#if>
			</#if>
		</#list>
	}

	/**
	 * 根据查询条件 导出查询所得数据字典
	 * @param
	 * @return
	 */
	@RequestMapping(value = "export")
	public void export${table.className}(HttpServletRequest request, HttpServletResponse response,${table.className} ${table.className?uncap_first}) {
		List<${table.className}> ${table.className?uncap_first}List = ${table.className?uncap_first}Service.findList(${table.className?uncap_first});
		try {
			response.setContentType("multipart/form-data");
			response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode("${exportName}.xls", "UTF-8"));
			ExcelUtil.getInstance().exportObj2Excel(response.getOutputStream(), ${table.className?uncap_first}List, ${table.className}.class);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 导入
	 */
	@ResponseBody
	@RequestMapping(value = "importExcel")
	public BaseOpMsg importExcel(@RequestParam("file") MultipartFile fileupload,HttpServletRequest request){
		logger.debug("Single excel file import!");
		//SysUser user = UserUtil.getInstance().getUser(request.getRemoteUser());
		SysUser user = new SysUser();user.setId(1L);
		//上传文件
		BaseOpMsg result = baseImportExcel(fileupload,user,"excel");
		BaseFile baseFile = (BaseFile)result.getObject();
		if(result.getObject()==null){
			return result;
		}
		//读取上传文件数据
		List<Object> objectList = ExcelUtil.getInstance().readExcel2ObjsByFile(baseFile.getFile(), ${table.className}.class, 3, 0);
		//数据验证 并写入数据库
		for(Object o:objectList){
			${table.className} ${table.className?uncap_first} = (${table.className})o;
			//字段不能为空，字段是数据字典，日期时间比较，字段值唯一
			<#list table.allTableColumns as c>
	             <#if c.isImport?? && c.isImport == "1" && c.validators?? >
					 <#list c.validators as v>
					  	<#if v == "notEmpty">
			if(${table.className?uncap_first}.get${c.javaField?cap_first}()==null||"".equals(${table.className?uncap_first}.get${c.javaField?cap_first}())){
                result.setCode(StatusCode.UPLOAD_FILE_FAILURE);
                result.setStatus("error");
                result.setMsg("${c.comments}不能为空");
                return result;
            }
                     	<#elseif  v=="alphabet">
            Pattern pattern${c.javaField?cap_first} = Pattern.compile("^[a-zA-Z]+$");
            Matcher matcher${c.javaField?cap_first} = pattern${c.javaField?cap_first}.matcher(${table.className?uncap_first}.get${c.javaField?cap_first}()+"");
            if (!matcher${c.javaField?cap_first}.find()){
				result.setCode(StatusCode.UPLOAD_FILE_FAILURE);
                result.setStatus("error");
                result.setMsg("${c.comments}只能字母");
                return result;
            }
                     	<#elseif  v=="number">
			Pattern pattern${c.javaField?cap_first} = Pattern.compile("^[0-9]+$");
            Matcher matcher${c.javaField?cap_first} = pattern${c.javaField?cap_first}.matcher(${table.className?uncap_first}.get${c.javaField?cap_first}()+"");
            if (!matcher${c.javaField?cap_first}.find()){
				result.setCode(StatusCode.UPLOAD_FILE_FAILURE);
                result.setStatus("error");
                result.setMsg("${c.comments}只能数字");
                return result;
            }
						</#if>
                     </#list>
	              </#if>
	         </#list>
			${table.className?uncap_first}Service.saveObj(${table.className?uncap_first}, user);//或改为批量插入
		}
		result.setCode(StatusCode.UPLOAD_FILE_SUCCESS);
        result.setStatus("success");
        result.setMsg("导入成功");
        return result;
	}

}
]]>
    </content>
</template>